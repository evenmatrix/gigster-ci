#---SECTION 1: CHOOSING THE BRANCHES TO BUILD---#
#
# CircleCI by default tests every push to any branch in the repository.
# Testing all branches maintains quality in all branches and adds confidence
# when the branches are to be merged with default branch.
#
# You may, however, blacklist branches from being built in CircleCI.
# This example excludes gh-pages from being built in circle:
#
# general:
#   branches:
#     ignore:
#       - gh-pages # list of branches to ignore
#       - /release\/.*/ # or ignore regexes
#
# You may also whitelist branches, so only whitelisted branches will trigger
# a build. This example limit builds in circle to master and feature-.* branches:
#
# general:
#   branches:
#     only:
#       - master # list of branches to build
#       - /feature-.*/ # or regexes
general:
  branches:
    only:
      - master # only build this branch

#---SECTION 2: CUSTOMIZE THE TEST MACHINE---#
#
# Setting up your test environment has two key parts: 
# (1) determining which circleci services to use
# (2) setting environment variables
#
machine:
  services:
    - docker
  environment:
  # set your environment variables here
  #
  # examples:
  #
  # environment:
  #   DB_URL_MONGO: mongodb://127.0.0.1:2017/test
  #   KUBECONFIG: $PWD/$CIRCLE_PROJECT_REPONAME/k8s/kubeconfig.yml
  #   PATH: $PATH:$PWD/$CIRCLE_PROJECT_REPONAME/kubernetes/client/bin  

#---SECTION 3: INSTALL DEPENDENCIES---#
#
# Circle automatically detects the dependencies for many types of frameworks
# e.g., Ruby's Gemfile, Python's requirements.txt, and Node.js's package.json
#
# When a framework is detected, circleci will automatically run the appropriate
# command. For example, if nodjes is detected, circleci will automatically run
# "npm install", i.e., no need to run it 
#
# You can add pre, post, and override sections in the dependencies block to run
# your custom dependency commands

dependencies:
  # examples:
  # 
  # dependencies:
  #   override:
  #     - npm install --only=dev # this overrides the default npm install with a call that includes an environment
  #   post:
  #     - ./patch_files.sh
  #     - wget https://github.com/kubernetes/kubernetes/releases/download/v1.5.0-beta.2/kubernetes.tar.gz
  #     - tar -xvzf kubernetes.tar.gz
  #     - echo “Y” | kubernetes/cluster/get-kube-binaries.sh
  pre:
  override:
  post:
    - npm install mocha@3.2.0 -g # library used for testing

#---SECTION 4: RUN TESTS ---#
#
# Add your test commands here
#
# For example, if your have a nodejs project, you should add "- npm test" under override
#
# Test can have the usal pre, override, and post sections
#
# pre: in this section you should build your docker file, and if you need to run the server separately to test it then you need to run the containr
# override: in this section you should execute the scripts inside the docker container

test:
  # examples:
  #
  # test:
  #   pre:
  #     - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM .
  #     - docker run --name $CIRCLE_PROJECT_REPONAME -p 3000:3000 -d $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM 
  #     - sleep 1m
  #   override:
  #     - php ./test-suite/run.php --unit-tests
  #     - make test 
  
  pre:
    - docker build -t $CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM .
    - docker run --name $CIRCLE_PROJECT_REPONAME -p 3000:3000 -d $CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM 
    - sleep 1m
  override:
    - npm test
  post:
  
#--SECTION 5: DEPLOY CODE---#
# Customize your deployment commands (if necessary)
# Example below can be left as is for most Gigster projects

deployment:
  # examples:
  #
  # staging:
  #   branch: master # determines branch that triggers deployment. For example, 
  #                  # changes to branch labeled "development" would not trigger 
  #                  # a deployment if branch: master
  #   owner: gigster-eng
  #   commands:
  #     - ./deploy.sh --staging=true
  # 
  # prod:
  #  branch: master
  #  owner: gigster-eng # replace gigster-eng with the name of the github org your repo is in if it is not gigster-eng
  #  commands:
  #    - ./deploy.sh

  production:
    branch: master
    owner: gigster-eng
    commands:
      - ./deploy.sh
